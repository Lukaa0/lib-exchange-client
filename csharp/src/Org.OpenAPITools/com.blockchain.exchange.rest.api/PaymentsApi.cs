/* 
 * Blockchain.com Exchange REST API
 *
 * ## Introduction Welcome to Blockchain.com's Exchange API and developer documentation. \\ These documents detail and give examples of various functionality offered by the API such as receiving real time market data, requesting balance information and performing trades. ## To Get Started Create or log into your existing Blockchain.com Exchange account \\ Select API from the drop down menu \\ Fill out form and click “Create New API Key Now” \\ Once generated you can view your keys under API Settings. \\ Please be aware that the API key can only be used once it was verified via email.  The API key must be set via the \\ `X-API-Token`\\ header.  The base URL to be used for all calls is \\ `https://api.blockchain.com/v3/exchange`  Autogenerated clients for this API can be found [here](https://github.com/blockchain/lib-exchange-client). 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.com.blockchain.exchange.rest.model;
using RestSharp;

namespace Org.OpenAPITools.com.blockchain.exchange.rest.api;

/// <summary>
///   Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IPaymentsApi : IApiAccessor
{
	#region Synchronous Operations
	/// <summary>
	///   Request a withdrawal
	/// </summary>
	/// <remarks>
	///   Call &#x60;Get /whitelist&#x60; first to retrieve the ID of the beneficiary. To add a beneficiary to the whitelist,
	///   please visit the profile page in the Exchange. This call only works if 2FA is enabled on the account.
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="createWithdrawalRequest"></param>
	/// <returns>WithdrawalInfo</returns>
	WithdrawalInfo CreateWithdrawal(CreateWithdrawalRequest createWithdrawalRequest);

	/// <summary>
	///   Request a withdrawal
	/// </summary>
	/// <remarks>
	///   Call &#x60;Get /whitelist&#x60; first to retrieve the ID of the beneficiary. To add a beneficiary to the whitelist,
	///   please visit the profile page in the Exchange. This call only works if 2FA is enabled on the account.
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="createWithdrawalRequest"></param>
	/// <returns>ApiResponse of WithdrawalInfo</returns>
	ApiResponse<WithdrawalInfo> CreateWithdrawalWithHttpInfo(
		CreateWithdrawalRequest createWithdrawalRequest);

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="account">Account</param>
	/// <param name="currency">Currency</param>
	/// <returns>Balance</returns>
	Balance GetAccountByTypeAndCurrency(string account, string currency);

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="account">Account</param>
	/// <param name="currency">Currency</param>
	/// <returns>ApiResponse of Balance</returns>
	ApiResponse<Balance> GetAccountByTypeAndCurrencyWithHttpInfo(string account,
		string currency);

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>BalanceMap</returns>
	BalanceMap GetAccounts();

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>ApiResponse of BalanceMap</returns>
	ApiResponse<BalanceMap> GetAccountsWithHttpInfo();

	/// <summary>
	///   Get a deposit address. Currently only crypto currencies are supported
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>DepositAddressCrypto</returns>
	DepositAddressCrypto GetDepositAddress(string currency);

	/// <summary>
	///   Get a deposit address. Currently only crypto currencies are supported
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>ApiResponse of DepositAddressCrypto</returns>
	ApiResponse<DepositAddressCrypto> GetDepositAddressWithHttpInfo(string currency);

	/// <summary>
	///   Get status about a deposit
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="depositId">Deposit ID</param>
	/// <returns>DepositInfo</returns>
	DepositInfo GetDepositById(string depositId);

	/// <summary>
	///   Get status about a deposit
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="depositId">Deposit ID</param>
	/// <returns>ApiResponse of DepositInfo</returns>
	ApiResponse<DepositInfo> GetDepositByIdWithHttpInfo(string depositId);

	/// <summary>
	///   Get a list of deposits
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>List&lt;DepositInfo&gt;</returns>
	List<DepositInfo> GetDeposits(long? from = default, long? to = default);

	/// <summary>
	///   Get a list of deposits
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>ApiResponse of List&lt;DepositInfo&gt;</returns>
	ApiResponse<List<DepositInfo>> GetDepositsWithHttpInfo(long? from = default,
		long? to = default);

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>List&lt;WhitelistEntry&gt;</returns>
	List<WhitelistEntry> GetWhitelist();

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>ApiResponse of List&lt;WhitelistEntry&gt;</returns>
	ApiResponse<List<WhitelistEntry>> GetWhitelistWithHttpInfo();

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>List&lt;WhitelistEntry&gt;</returns>
	List<WhitelistEntry> GetWhitelistByCurrency(string currency);

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>ApiResponse of List&lt;WhitelistEntry&gt;</returns>
	ApiResponse<List<WhitelistEntry>> GetWhitelistByCurrencyWithHttpInfo(string currency);

	/// <summary>
	///   Get status about a withdrawal
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="withdrawalId">Withdrawal ID</param>
	/// <returns>WithdrawalInfo</returns>
	WithdrawalInfo GetWithdrawalById(string withdrawalId);

	/// <summary>
	///   Get status about a withdrawal
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="withdrawalId">Withdrawal ID</param>
	/// <returns>ApiResponse of WithdrawalInfo</returns>
	ApiResponse<WithdrawalInfo> GetWithdrawalByIdWithHttpInfo(string withdrawalId);

	/// <summary>
	///   Get a list of withdrawals
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>List&lt;WithdrawalInfo&gt;</returns>
	List<WithdrawalInfo> GetWithdrawals(long? from = default, long? to = default);

	/// <summary>
	///   Get a list of withdrawals
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>ApiResponse of List&lt;WithdrawalInfo&gt;</returns>
	ApiResponse<List<WithdrawalInfo>> GetWithdrawalsWithHttpInfo(long? from = default,
		long? to = default);
	#endregion Synchronous Operations
	#region Asynchronous Operations
	/// <summary>
	///   Request a withdrawal
	/// </summary>
	/// <remarks>
	///   Call &#x60;Get /whitelist&#x60; first to retrieve the ID of the beneficiary. To add a beneficiary to the whitelist,
	///   please visit the profile page in the Exchange. This call only works if 2FA is enabled on the account.
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="createWithdrawalRequest"></param>
	/// <returns>Task of WithdrawalInfo</returns>
	Task<WithdrawalInfo> CreateWithdrawalAsync(CreateWithdrawalRequest createWithdrawalRequest);

	/// <summary>
	///   Request a withdrawal
	/// </summary>
	/// <remarks>
	///   Call &#x60;Get /whitelist&#x60; first to retrieve the ID of the beneficiary. To add a beneficiary to the whitelist,
	///   please visit the profile page in the Exchange. This call only works if 2FA is enabled on the account.
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="createWithdrawalRequest"></param>
	/// <returns>Task of ApiResponse (WithdrawalInfo)</returns>
	Task<ApiResponse<WithdrawalInfo>> CreateWithdrawalAsyncWithHttpInfo(
		CreateWithdrawalRequest createWithdrawalRequest);

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="account">Account</param>
	/// <param name="currency">Currency</param>
	/// <returns>Task of Balance</returns>
	Task<Balance> GetAccountByTypeAndCurrencyAsync(string account, string currency);

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="account">Account</param>
	/// <param name="currency">Currency</param>
	/// <returns>Task of ApiResponse (Balance)</returns>
	Task<ApiResponse<Balance>> GetAccountByTypeAndCurrencyAsyncWithHttpInfo(string account,
		string currency);

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>Task of BalanceMap</returns>
	Task<BalanceMap> GetAccountsAsync();

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>Task of ApiResponse (BalanceMap)</returns>
	Task<ApiResponse<BalanceMap>> GetAccountsAsyncWithHttpInfo();

	/// <summary>
	///   Get a deposit address. Currently only crypto currencies are supported
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>Task of DepositAddressCrypto</returns>
	Task<DepositAddressCrypto> GetDepositAddressAsync(string currency);

	/// <summary>
	///   Get a deposit address. Currently only crypto currencies are supported
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>Task of ApiResponse (DepositAddressCrypto)</returns>
	Task<ApiResponse<DepositAddressCrypto>> GetDepositAddressAsyncWithHttpInfo(string currency);

	/// <summary>
	///   Get status about a deposit
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="depositId">Deposit ID</param>
	/// <returns>Task of DepositInfo</returns>
	Task<DepositInfo> GetDepositByIdAsync(string depositId);

	/// <summary>
	///   Get status about a deposit
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="depositId">Deposit ID</param>
	/// <returns>Task of ApiResponse (DepositInfo)</returns>
	Task<ApiResponse<DepositInfo>> GetDepositByIdAsyncWithHttpInfo(string depositId);

	/// <summary>
	///   Get a list of deposits
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>Task of List&lt;DepositInfo&gt;</returns>
	Task<List<DepositInfo>> GetDepositsAsync(long? from = default, long? to = default);

	/// <summary>
	///   Get a list of deposits
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>Task of ApiResponse (List&lt;DepositInfo&gt;)</returns>
	Task<ApiResponse<List<DepositInfo>>> GetDepositsAsyncWithHttpInfo(long? from = default,
		long? to = default);

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>Task of List&lt;WhitelistEntry&gt;</returns>
	Task<List<WhitelistEntry>> GetWhitelistAsync();

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>Task of ApiResponse (List&lt;WhitelistEntry&gt;)</returns>
	Task<ApiResponse<List<WhitelistEntry>>> GetWhitelistAsyncWithHttpInfo();

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>Task of List&lt;WhitelistEntry&gt;</returns>
	Task<List<WhitelistEntry>> GetWhitelistByCurrencyAsync(string currency);

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>Task of ApiResponse (List&lt;WhitelistEntry&gt;)</returns>
	Task<ApiResponse<List<WhitelistEntry>>> GetWhitelistByCurrencyAsyncWithHttpInfo(
		string currency);

	/// <summary>
	///   Get status about a withdrawal
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="withdrawalId">Withdrawal ID</param>
	/// <returns>Task of WithdrawalInfo</returns>
	Task<WithdrawalInfo> GetWithdrawalByIdAsync(string withdrawalId);

	/// <summary>
	///   Get status about a withdrawal
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="withdrawalId">Withdrawal ID</param>
	/// <returns>Task of ApiResponse (WithdrawalInfo)</returns>
	Task<ApiResponse<WithdrawalInfo>> GetWithdrawalByIdAsyncWithHttpInfo(string withdrawalId);

	/// <summary>
	///   Get a list of withdrawals
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>Task of List&lt;WithdrawalInfo&gt;</returns>
	Task<List<WithdrawalInfo>> GetWithdrawalsAsync(long? from = default, long? to = default);

	/// <summary>
	///   Get a list of withdrawals
	/// </summary>
	/// <remarks>
	/// </remarks>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>Task of ApiResponse (List&lt;WithdrawalInfo&gt;)</returns>
	Task<ApiResponse<List<WithdrawalInfo>>> GetWithdrawalsAsyncWithHttpInfo(
		long? from = default, long? to = default);
	#endregion Asynchronous Operations
}

/// <summary>
///   Represents a collection of functions to interact with the API endpoints
/// </summary>
public class PaymentsApi : IPaymentsApi
{
	private ExceptionFactory _exceptionFactory = (name, response) => null;

	/// <summary>
	///   Initializes a new instance of the <see cref="PaymentsApi" /> class.
	/// </summary>
	/// <returns></returns>
	public PaymentsApi(string basePath)
	{
		Configuration = new Configuration { BasePath = basePath };
		ExceptionFactory = Configuration.DefaultExceptionFactory;
	}

	/// <summary>
	///   Initializes a new instance of the <see cref="PaymentsApi" /> class
	/// </summary>
	/// <returns></returns>
	public PaymentsApi()
	{
		Configuration = Configuration.Default;
		ExceptionFactory = Configuration.DefaultExceptionFactory;
	}

	/// <summary>
	///   Initializes a new instance of the <see cref="PaymentsApi" /> class
	///   using Configuration object
	/// </summary>
	/// <param name="configuration">An instance of Configuration</param>
	/// <returns></returns>
	public PaymentsApi(Configuration configuration = null)
	{
		if (configuration == null) // use the default one in Configuration
			Configuration = Configuration.Default;
		else
			Configuration = configuration;
		ExceptionFactory = Configuration.DefaultExceptionFactory;
	}

	/// <summary>
	///   Gets the base path of the API client.
	/// </summary>
	/// <value>The base path</value>
	public string GetBasePath() =>
		Configuration.ApiClient.RestClient.Options.BaseUrl.ToString();

	/// <summary>
	///   Gets or sets the configuration object
	/// </summary>
	/// <value>An instance of the Configuration</value>
	public Configuration Configuration { get; set; }
	/// <summary>
	///   Provides a factory method hook for the creation of exceptions.
	/// </summary>
	public ExceptionFactory ExceptionFactory
	{
		get
		{
			if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
				throw new InvalidOperationException(
					"Multicast delegate for ExceptionFactory is unsupported.");
			return _exceptionFactory;
		}
		set => _exceptionFactory = value;
	}

	/// <summary>
	///   Request a withdrawal Call &#x60;Get /whitelist&#x60; first to retrieve the ID of the beneficiary. To add a
	///   beneficiary to the whitelist, please visit the profile page in the Exchange. This call only works if 2FA is enabled
	///   on the account.
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="createWithdrawalRequest"></param>
	/// <returns>WithdrawalInfo</returns>
	public WithdrawalInfo CreateWithdrawal(CreateWithdrawalRequest createWithdrawalRequest)
	{
		var localVarResponse = CreateWithdrawalWithHttpInfo(createWithdrawalRequest);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Request a withdrawal Call &#x60;Get /whitelist&#x60; first to retrieve the ID of the beneficiary. To add a
	///   beneficiary to the whitelist, please visit the profile page in the Exchange. This call only works if 2FA is enabled
	///   on the account.
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="createWithdrawalRequest"></param>
	/// <returns>ApiResponse of WithdrawalInfo</returns>
	public ApiResponse<WithdrawalInfo> CreateWithdrawalWithHttpInfo(
		CreateWithdrawalRequest createWithdrawalRequest)
	{
		// verify the required parameter 'createWithdrawalRequest' is set
		if (createWithdrawalRequest == null)
			throw new ApiException(400,
				"Missing required parameter 'createWithdrawalRequest' when calling PaymentsApi->CreateWithdrawal");
		var localVarPath = "/withdrawals";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { "application/json" };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (createWithdrawalRequest != null &&
			createWithdrawalRequest.GetType() != typeof(byte[]))
			localVarPostBody =
				Configuration.ApiClient.Serialize(
					createWithdrawalRequest); // http body (model) parameter
		else
			localVarPostBody = createWithdrawalRequest; // byte array

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		var localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(localVarPath,
			Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams,
			localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("CreateWithdrawal", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<WithdrawalInfo>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(WithdrawalInfo)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(WithdrawalInfo)));
	}

	/// <summary>
	///   Request a withdrawal Call &#x60;Get /whitelist&#x60; first to retrieve the ID of the beneficiary. To add a
	///   beneficiary to the whitelist, please visit the profile page in the Exchange. This call only works if 2FA is enabled
	///   on the account.
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="createWithdrawalRequest"></param>
	/// <returns>Task of WithdrawalInfo</returns>
	public async Task<WithdrawalInfo> CreateWithdrawalAsync(
		CreateWithdrawalRequest createWithdrawalRequest)
	{
		var localVarResponse = await CreateWithdrawalAsyncWithHttpInfo(createWithdrawalRequest);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Request a withdrawal Call &#x60;Get /whitelist&#x60; first to retrieve the ID of the beneficiary. To add a
	///   beneficiary to the whitelist, please visit the profile page in the Exchange. This call only works if 2FA is enabled
	///   on the account.
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="createWithdrawalRequest"></param>
	/// <returns>Task of ApiResponse (WithdrawalInfo)</returns>
	public async Task<ApiResponse<WithdrawalInfo>> CreateWithdrawalAsyncWithHttpInfo(
		CreateWithdrawalRequest createWithdrawalRequest)
	{
		// verify the required parameter 'createWithdrawalRequest' is set
		if (createWithdrawalRequest == null)
			throw new ApiException(400,
				"Missing required parameter 'createWithdrawalRequest' when calling PaymentsApi->CreateWithdrawal");
		var localVarPath = "/withdrawals";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { "application/json" };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (createWithdrawalRequest != null &&
			createWithdrawalRequest.GetType() != typeof(byte[]))
			localVarPostBody =
				Configuration.ApiClient.Serialize(
					createWithdrawalRequest); // http body (model) parameter
		else
			localVarPostBody = createWithdrawalRequest; // byte array

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse =
			(RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath, Method.Post,
				localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
				localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("CreateWithdrawal", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<WithdrawalInfo>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(WithdrawalInfo)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(WithdrawalInfo)));
	}

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="account">Account</param>
	/// <param name="currency">Currency</param>
	/// <returns>Balance</returns>
	public Balance GetAccountByTypeAndCurrency(string account, string currency)
	{
		var localVarResponse = GetAccountByTypeAndCurrencyWithHttpInfo(account, currency);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="account">Account</param>
	/// <param name="currency">Currency</param>
	/// <returns>ApiResponse of Balance</returns>
	public ApiResponse<Balance> GetAccountByTypeAndCurrencyWithHttpInfo(string account,
		string currency)
	{
		// verify the required parameter 'account' is set
		if (account == null)
			throw new ApiException(400,
				"Missing required parameter 'account' when calling PaymentsApi->GetAccountByTypeAndCurrency");
		// verify the required parameter 'currency' is set
		if (currency == null)
			throw new ApiException(400,
				"Missing required parameter 'currency' when calling PaymentsApi->GetAccountByTypeAndCurrency");
		var localVarPath = "/accounts/{account}/{currency}";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (account != null)
			localVarPathParams.Add("account",
				Configuration.ApiClient.ParameterToString(account)); // path parameter
		if (currency != null)
			localVarPathParams.Add("currency",
				Configuration.ApiClient.ParameterToString(currency)); // path parameter

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(
			localVarPath, Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams,
			localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetAccountByTypeAndCurrency", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<Balance>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(Balance)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Balance)));
	}

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="account">Account</param>
	/// <param name="currency">Currency</param>
	/// <returns>Task of Balance</returns>
	public async Task<Balance> GetAccountByTypeAndCurrencyAsync(string account, string currency)
	{
		var localVarResponse =
			await GetAccountByTypeAndCurrencyAsyncWithHttpInfo(account, currency);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="account">Account</param>
	/// <param name="currency">Currency</param>
	/// <returns>Task of ApiResponse (Balance)</returns>
	public async Task<ApiResponse<Balance>> GetAccountByTypeAndCurrencyAsyncWithHttpInfo(
		string account, string currency)
	{
		// verify the required parameter 'account' is set
		if (account == null)
			throw new ApiException(400,
				"Missing required parameter 'account' when calling PaymentsApi->GetAccountByTypeAndCurrency");
		// verify the required parameter 'currency' is set
		if (currency == null)
			throw new ApiException(400,
				"Missing required parameter 'currency' when calling PaymentsApi->GetAccountByTypeAndCurrency");
		var localVarPath = "/accounts/{account}/{currency}";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (account != null)
			localVarPathParams.Add("account",
				Configuration.ApiClient.ParameterToString(account)); // path parameter
		if (currency != null)
			localVarPathParams.Add("currency",
				Configuration.ApiClient.ParameterToString(currency)); // path parameter

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse =
			(RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath, Method.Get,
				localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
				localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetAccountByTypeAndCurrency", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<Balance>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(Balance)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Balance)));
	}

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>BalanceMap</returns>
	public BalanceMap GetAccounts()
	{
		var localVarResponse = GetAccountsWithHttpInfo();
		return localVarResponse.Data;
	}

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>ApiResponse of BalanceMap</returns>
	public ApiResponse<BalanceMap> GetAccountsWithHttpInfo()
	{
		var localVarPath = "/accounts";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(
			localVarPath, Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams,
			localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetAccounts", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<BalanceMap>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(BalanceMap)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceMap)));
	}

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>Task of BalanceMap</returns>
	public async Task<BalanceMap> GetAccountsAsync()
	{
		var localVarResponse = await GetAccountsAsyncWithHttpInfo();
		return localVarResponse.Data;
	}

	/// <summary>
	///   Receive current account balances
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>Task of ApiResponse (BalanceMap)</returns>
	public async Task<ApiResponse<BalanceMap>> GetAccountsAsyncWithHttpInfo()
	{
		var localVarPath = "/accounts";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse =
			(RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath, Method.Get,
				localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
				localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetAccounts", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<BalanceMap>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(BalanceMap)Configuration.ApiClient.Deserialize(localVarResponse, typeof(BalanceMap)));
	}

	/// <summary>
	///   Get a deposit address. Currently only crypto currencies are supported
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>DepositAddressCrypto</returns>
	public DepositAddressCrypto GetDepositAddress(string currency)
	{
		var localVarResponse = GetDepositAddressWithHttpInfo(currency);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Get a deposit address. Currently only crypto currencies are supported
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>ApiResponse of DepositAddressCrypto</returns>
	public ApiResponse<DepositAddressCrypto> GetDepositAddressWithHttpInfo(string currency)
	{
		// verify the required parameter 'currency' is set
		if (currency == null)
			throw new ApiException(400,
				"Missing required parameter 'currency' when calling PaymentsApi->GetDepositAddress");
		var localVarPath = "/deposits/{currency}";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (currency != null)
			localVarPathParams.Add("currency",
				Configuration.ApiClient.ParameterToString(currency)); // path parameter

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(
			localVarPath, Method.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams,
			localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetDepositAddress", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<DepositAddressCrypto>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(DepositAddressCrypto)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(DepositAddressCrypto)));
	}

	/// <summary>
	///   Get a deposit address. Currently only crypto currencies are supported
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>Task of DepositAddressCrypto</returns>
	public async Task<DepositAddressCrypto> GetDepositAddressAsync(string currency)
	{
		var localVarResponse = await GetDepositAddressAsyncWithHttpInfo(currency);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Get a deposit address. Currently only crypto currencies are supported
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>Task of ApiResponse (DepositAddressCrypto)</returns>
	public async Task<ApiResponse<DepositAddressCrypto>> GetDepositAddressAsyncWithHttpInfo(
		string currency)
	{
		// verify the required parameter 'currency' is set
		if (currency == null)
			throw new ApiException(400,
				"Missing required parameter 'currency' when calling PaymentsApi->GetDepositAddress");
		var localVarPath = "/deposits/{currency}";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (currency != null)
			localVarPathParams.Add("currency",
				Configuration.ApiClient.ParameterToString(currency)); // path parameter

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse =
			(RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath, Method.Post,
				localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
				localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetDepositAddress", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<DepositAddressCrypto>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(DepositAddressCrypto)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(DepositAddressCrypto)));
	}

	/// <summary>
	///   Get status about a deposit
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="depositId">Deposit ID</param>
	/// <returns>DepositInfo</returns>
	public DepositInfo GetDepositById(string depositId)
	{
		var localVarResponse = GetDepositByIdWithHttpInfo(depositId);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Get status about a deposit
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="depositId">Deposit ID</param>
	/// <returns>ApiResponse of DepositInfo</returns>
	public ApiResponse<DepositInfo> GetDepositByIdWithHttpInfo(string depositId)
	{
		// verify the required parameter 'depositId' is set
		if (depositId == null)
			throw new ApiException(400,
				"Missing required parameter 'depositId' when calling PaymentsApi->GetDepositById");
		var localVarPath = "/deposits/{depositId}";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (depositId != null)
			localVarPathParams.Add("depositId",
				Configuration.ApiClient.ParameterToString(depositId)); // path parameter

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(
			localVarPath, Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams,
			localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetDepositById", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<DepositInfo>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(DepositInfo)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(DepositInfo)));
	}

	/// <summary>
	///   Get status about a deposit
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="depositId">Deposit ID</param>
	/// <returns>Task of DepositInfo</returns>
	public async Task<DepositInfo> GetDepositByIdAsync(string depositId)
	{
		var localVarResponse = await GetDepositByIdAsyncWithHttpInfo(depositId);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Get status about a deposit
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="depositId">Deposit ID</param>
	/// <returns>Task of ApiResponse (DepositInfo)</returns>
	public async Task<ApiResponse<DepositInfo>> GetDepositByIdAsyncWithHttpInfo(
		string depositId)
	{
		// verify the required parameter 'depositId' is set
		if (depositId == null)
			throw new ApiException(400,
				"Missing required parameter 'depositId' when calling PaymentsApi->GetDepositById");
		var localVarPath = "/deposits/{depositId}";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (depositId != null)
			localVarPathParams.Add("depositId",
				Configuration.ApiClient.ParameterToString(depositId)); // path parameter

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse =
			(RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath, Method.Get,
				localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
				localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetDepositById", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<DepositInfo>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(DepositInfo)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(DepositInfo)));
	}

	/// <summary>
	///   Get a list of deposits
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>List&lt;DepositInfo&gt;</returns>
	public List<DepositInfo> GetDeposits(long? from = default, long? to = default)
	{
		var localVarResponse = GetDepositsWithHttpInfo(from, to);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Get a list of deposits
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>ApiResponse of List&lt;DepositInfo&gt;</returns>
	public ApiResponse<List<DepositInfo>> GetDepositsWithHttpInfo(long? from = default,
		long? to = default)
	{
		var localVarPath = "/deposits";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (from != null)
			localVarQueryParams.AddRange(
				Configuration.ApiClient.ParameterToKeyValuePairs("", "from",
					from)); // query parameter
		if (to != null)
			localVarQueryParams.AddRange(
				Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(
			localVarPath, Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams,
			localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetDeposits", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<List<DepositInfo>>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(List<DepositInfo>)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(List<DepositInfo>)));
	}

	/// <summary>
	///   Get a list of deposits
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>Task of List&lt;DepositInfo&gt;</returns>
	public async Task<List<DepositInfo>> GetDepositsAsync(long? from = default,
		long? to = default)
	{
		var localVarResponse = await GetDepositsAsyncWithHttpInfo(from, to);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Get a list of deposits
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>Task of ApiResponse (List&lt;DepositInfo&gt;)</returns>
	public async Task<ApiResponse<List<DepositInfo>>> GetDepositsAsyncWithHttpInfo(
		long? from = default, long? to = default)
	{
		var localVarPath = "/deposits";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (from != null)
			localVarQueryParams.AddRange(
				Configuration.ApiClient.ParameterToKeyValuePairs("", "from",
					from)); // query parameter
		if (to != null)
			localVarQueryParams.AddRange(
				Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse =
			(RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath, Method.Get,
				localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
				localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetDeposits", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<List<DepositInfo>>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(List<DepositInfo>)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(List<DepositInfo>)));
	}

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>List&lt;WhitelistEntry&gt;</returns>
	public List<WhitelistEntry> GetWhitelist()
	{
		var localVarResponse = GetWhitelistWithHttpInfo();
		return localVarResponse.Data;
	}

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>ApiResponse of List&lt;WhitelistEntry&gt;</returns>
	public ApiResponse<List<WhitelistEntry>> GetWhitelistWithHttpInfo()
	{
		var localVarPath = "/whitelist";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(
			localVarPath, Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams,
			localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetWhitelist", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<List<WhitelistEntry>>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(List<WhitelistEntry>)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(List<WhitelistEntry>)));
	}

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>Task of List&lt;WhitelistEntry&gt;</returns>
	public async Task<List<WhitelistEntry>> GetWhitelistAsync()
	{
		var localVarResponse = await GetWhitelistAsyncWithHttpInfo();
		return localVarResponse.Data;
	}

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <returns>Task of ApiResponse (List&lt;WhitelistEntry&gt;)</returns>
	public async Task<ApiResponse<List<WhitelistEntry>>> GetWhitelistAsyncWithHttpInfo()
	{
		var localVarPath = "/whitelist";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse =
			(RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath, Method.Get,
				localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
				localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetWhitelist", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<List<WhitelistEntry>>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(List<WhitelistEntry>)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(List<WhitelistEntry>)));
	}

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>List&lt;WhitelistEntry&gt;</returns>
	public List<WhitelistEntry> GetWhitelistByCurrency(string currency)
	{
		var localVarResponse = GetWhitelistByCurrencyWithHttpInfo(currency);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>ApiResponse of List&lt;WhitelistEntry&gt;</returns>
	public ApiResponse<List<WhitelistEntry>> GetWhitelistByCurrencyWithHttpInfo(string currency)
	{
		// verify the required parameter 'currency' is set
		if (currency == null)
			throw new ApiException(400,
				"Missing required parameter 'currency' when calling PaymentsApi->GetWhitelistByCurrency");
		var localVarPath = "/whitelist/{currency}";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (currency != null)
			localVarPathParams.Add("currency",
				Configuration.ApiClient.ParameterToString(currency)); // path parameter

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(
			localVarPath, Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams,
			localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetWhitelistByCurrency", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<List<WhitelistEntry>>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(List<WhitelistEntry>)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(List<WhitelistEntry>)));
	}

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>Task of List&lt;WhitelistEntry&gt;</returns>
	public async Task<List<WhitelistEntry>> GetWhitelistByCurrencyAsync(string currency)
	{
		var localVarResponse = await GetWhitelistByCurrencyAsyncWithHttpInfo(currency);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Get a list of all whitelisted withdrawal accounts
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="currency">Currency</param>
	/// <returns>Task of ApiResponse (List&lt;WhitelistEntry&gt;)</returns>
	public async Task<ApiResponse<List<WhitelistEntry>>>
		GetWhitelistByCurrencyAsyncWithHttpInfo(string currency)
	{
		// verify the required parameter 'currency' is set
		if (currency == null)
			throw new ApiException(400,
				"Missing required parameter 'currency' when calling PaymentsApi->GetWhitelistByCurrency");
		var localVarPath = "/whitelist/{currency}";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (currency != null)
			localVarPathParams.Add("currency",
				Configuration.ApiClient.ParameterToString(currency)); // path parameter

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse =
			(RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath, Method.Get,
				localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
				localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetWhitelistByCurrency", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<List<WhitelistEntry>>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(List<WhitelistEntry>)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(List<WhitelistEntry>)));
	}

	/// <summary>
	///   Get status about a withdrawal
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="withdrawalId">Withdrawal ID</param>
	/// <returns>WithdrawalInfo</returns>
	public WithdrawalInfo GetWithdrawalById(string withdrawalId)
	{
		var localVarResponse = GetWithdrawalByIdWithHttpInfo(withdrawalId);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Get status about a withdrawal
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="withdrawalId">Withdrawal ID</param>
	/// <returns>ApiResponse of WithdrawalInfo</returns>
	public ApiResponse<WithdrawalInfo> GetWithdrawalByIdWithHttpInfo(string withdrawalId)
	{
		// verify the required parameter 'withdrawalId' is set
		if (withdrawalId == null)
			throw new ApiException(400,
				"Missing required parameter 'withdrawalId' when calling PaymentsApi->GetWithdrawalById");
		var localVarPath = "/withdrawals/{withdrawalId}";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (withdrawalId != null)
			localVarPathParams.Add("withdrawalId",
				Configuration.ApiClient.ParameterToString(withdrawalId)); // path parameter

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(
			localVarPath, Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams,
			localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetWithdrawalById", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<WithdrawalInfo>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(WithdrawalInfo)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(WithdrawalInfo)));
	}

	/// <summary>
	///   Get status about a withdrawal
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="withdrawalId">Withdrawal ID</param>
	/// <returns>Task of WithdrawalInfo</returns>
	public async Task<WithdrawalInfo> GetWithdrawalByIdAsync(string withdrawalId)
	{
		var localVarResponse = await GetWithdrawalByIdAsyncWithHttpInfo(withdrawalId);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Get status about a withdrawal
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="withdrawalId">Withdrawal ID</param>
	/// <returns>Task of ApiResponse (WithdrawalInfo)</returns>
	public async Task<ApiResponse<WithdrawalInfo>> GetWithdrawalByIdAsyncWithHttpInfo(
		string withdrawalId)
	{
		// verify the required parameter 'withdrawalId' is set
		if (withdrawalId == null)
			throw new ApiException(400,
				"Missing required parameter 'withdrawalId' when calling PaymentsApi->GetWithdrawalById");
		var localVarPath = "/withdrawals/{withdrawalId}";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (withdrawalId != null)
			localVarPathParams.Add("withdrawalId",
				Configuration.ApiClient.ParameterToString(withdrawalId)); // path parameter

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse =
			(RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath, Method.Get,
				localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
				localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetWithdrawalById", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<WithdrawalInfo>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(WithdrawalInfo)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(WithdrawalInfo)));
	}

	/// <summary>
	///   Get a list of withdrawals
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>List&lt;WithdrawalInfo&gt;</returns>
	public List<WithdrawalInfo> GetWithdrawals(long? from = default, long? to = default)
	{
		var localVarResponse = GetWithdrawalsWithHttpInfo(from, to);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Get a list of withdrawals
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>ApiResponse of List&lt;WithdrawalInfo&gt;</returns>
	public ApiResponse<List<WithdrawalInfo>> GetWithdrawalsWithHttpInfo(long? from = default,
		long? to = default)
	{
		var localVarPath = "/withdrawals";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (from != null)
			localVarQueryParams.AddRange(
				Configuration.ApiClient.ParameterToKeyValuePairs("", "from",
					from)); // query parameter
		if (to != null)
			localVarQueryParams.AddRange(
				Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse = (RestResponse)Configuration.ApiClient.CallApi(
			localVarPath, Method.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams,
			localVarFormParams, localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetWithdrawals", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<List<WithdrawalInfo>>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(List<WithdrawalInfo>)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(List<WithdrawalInfo>)));
	}

	/// <summary>
	///   Get a list of withdrawals
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>Task of List&lt;WithdrawalInfo&gt;</returns>
	public async Task<List<WithdrawalInfo>> GetWithdrawalsAsync(long? from = default,
		long? to = default)
	{
		var localVarResponse = await GetWithdrawalsAsyncWithHttpInfo(from, to);
		return localVarResponse.Data;
	}

	/// <summary>
	///   Get a list of withdrawals
	/// </summary>
	/// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
	/// <param name="from">Epoch timestamp in ms (optional)</param>
	/// <param name="to">Epoch timestamp in ms (optional)</param>
	/// <returns>Task of ApiResponse (List&lt;WithdrawalInfo&gt;)</returns>
	public async Task<ApiResponse<List<WithdrawalInfo>>> GetWithdrawalsAsyncWithHttpInfo(
		long? from = default, long? to = default)
	{
		var localVarPath = "/withdrawals";
		var localVarPathParams = new Dictionary<string, string>();
		var localVarQueryParams = new List<KeyValuePair<string, string>>();
		var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
		var localVarFormParams = new Dictionary<string, string>();
		var localVarFileParams = new Dictionary<string, FileParameter>();
		object localVarPostBody = null;

		// to determine the Content-Type header
		string[] localVarHttpContentTypes = { };
		var localVarHttpContentType =
			Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

		// to determine the Accept header
		string[] localVarHttpHeaderAccepts = { "application/json" };
		var localVarHttpHeaderAccept =
			Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
		if (localVarHttpHeaderAccept != null)
			localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
		if (from != null)
			localVarQueryParams.AddRange(
				Configuration.ApiClient.ParameterToKeyValuePairs("", "from",
					from)); // query parameter
		if (to != null)
			localVarQueryParams.AddRange(
				Configuration.ApiClient.ParameterToKeyValuePairs("", "to", to)); // query parameter

		// authentication (ApiKeyAuth) required
		if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-API-Token")))
			localVarHeaderParams["X-API-Token"] = Configuration.GetApiKeyWithPrefix("X-API-Token");

		// make the HTTP request
		RestResponse localVarResponse =
			(RestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath, Method.Get,
				localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
				localVarFileParams, localVarPathParams, localVarHttpContentType);
		var localVarStatusCode = (int)localVarResponse.StatusCode;
		if (ExceptionFactory != null)
		{
			var exception = ExceptionFactory("GetWithdrawals", localVarResponse);
			if (exception != null)
				throw exception;
		}
		return new ApiResponse<List<WithdrawalInfo>>(localVarStatusCode,
			localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
			(List<WithdrawalInfo>)Configuration.ApiClient.Deserialize(localVarResponse,
				typeof(List<WithdrawalInfo>)));
	}

	/// <summary>
	///   Sets the base path of the API client.
	/// </summary>
	/// <value>The base path</value>
	[Obsolete(
		"SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
	public void SetBasePath(string basePath)
	{
		// do nothing
	}

	/// <summary>
	///   Gets the default header.
	/// </summary>
	/// <returns>Dictionary of HTTP header</returns>
	[Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
	public IDictionary<string, string> DefaultHeader() =>
		new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);

	/// <summary>
	///   Add default header.
	/// </summary>
	/// <param name="key">Header field name.</param>
	/// <param name="value">Header field value.</param>
	/// <returns></returns>
	[Obsolete(
		"AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
	public void AddDefaultHeader(string key, string value) =>
		Configuration.AddDefaultHeader(key, value);
}